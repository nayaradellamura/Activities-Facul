#include <stdio.h>
#include <stdlib.h>

/* -------------------------------------------------------------------- */
void shellSort(int *v, int n) {

    int incr, j, k, span, y;
    
    int numinc = 4;
    int incrmnts[4] = {15, 7, 3, 1};
    
    for (incr = 0; incr < numinc; incr++) {
        
        /* span é o tamanho do incremento */
        span = incrmnts[incr];

        for(j = span; j < n; j++) {
            
            /* insere elemento x[j] em sua posição */
            /* correta dentro de seu sub-arquivo   */
            y = v[j];

            for (k = j-span; k >= 0 && y < v[k]; k -= span)
                v[k+span] = v[k];
            
            v[k+span] = y;

        } /* fim do for (j) */

    } /* fim do for (incr) */

} /* fim da funcao shellSort */


/* -------------------------------------------------------------------- */
void inverteVetor (int *v, int n) {

    int i = 0;
    int j = n-1;
    int aux;

    while (i <= j) {
        aux = v[i];
        v[i++] = v[j];
        v[j--] = aux;
    }

} /* fim da funcao inverteVetor */


/* -------------------------------------------------------------------- */
void imprimeVetor (int *v, int n) {

    int i;

    for (i = 0; i < n; i++)
        printf(" %d ", v[i]);
    
    printf("\n");

} /* fim da funcao imprimeVetor */


/* -------------------------------------------------------------------- */
int main () {

    int *vet;
    int *pares;
    int *impares;
    int n;
    int numpares;
    int numimpares;
    int numero;
    int i;

    /* le o valor de N */
    scanf("%d", &n);

    /* aloca o vetor vet na memoria com tamanho n */
    vet = (int*) malloc (n * sizeof(int));

    /* preenche o vetor vet */
    numpares = 0;
    numimpares = 0;
    for (i = 0; i < n; i++) {
        
        /* le o numero */
        scanf("%d", &numero);

        /* verifica se o numero eh par ou impar */
        if ((numero % 2) == 0)
            numpares++;
        else
            numimpares++;

        /* guarda o numero no vetor vet */
        vet[i] = numero;

    } /* fim do for (i) */


    /* DEBUG ------------------------------------------- */
    printf("\nVetor Inicial:\n");
    imprimeVetor(vet, n);
    /* ------------------------------------------------- */


    /* aloca os vetores pares e impares */
    pares = (int*) malloc (numpares * sizeof(int));
    impares = (int*) malloc (numimpares * sizeof(int));

    /* preenche os vetores pares e impares */
    numpares = 0;
    numimpares = 0;
    for (i = 0; i < n; i++)
        if ((vet[i] % 2) == 0)
            pares[numpares++] = vet[i];
        else
            impares[numimpares++] = vet[i];


    /* DEBUG ------------------------------------------- */
    printf("\nVetores de Pares e Impares:\n");
    imprimeVetor(pares, numpares);
    imprimeVetor(impares, numimpares);
    /* ------------------------------------------------- */
    

    /* ordena os vetores pares e impares (usando o shellsort) */
    shellSort(pares, numpares);
    shellSort(impares, numimpares);
    
    /* inverte o vetor impares */
    inverteVetor(impares, numimpares);


    /* DEBUG ------------------------------------------- */
    printf("\nVetores de Pares e Impares Ordenados:\n");
    imprimeVetor(pares, numpares);
    imprimeVetor(impares, numimpares);
    /* ------------------------------------------------- */


    printf("\nRESPOSTA DO EXERCICIO:\n");
    /* imprime o vetor pares na tela */
    for (i = 0; i < numpares; i++)
        printf("%d\n", pares[i]);

    /* imprime o vetor impares (invertido) na tela */
    for (i = 0; i < numimpares; i++)
        printf("%d\n", impares[i]);

    printf("\n");
    return 0;

} /* fim da funcao main */
